@using TaskManager.Projects.Abstractions
@model ProjectDetailsDto
@using System.Security.Claims
@{
    ViewBag.BodyClass = "page-wide";
}


@{
    var currentUserId = User.FindFirst("sub")?.Value
                     ?? User.FindFirstValue(ClaimTypes.NameIdentifier);
    var isOwner = currentUserId == Model.OwnerUserId;
}

@{
    ViewData["Title"] = "Project Details";
    string Badge(ProjectStatus s) => s switch
    {
        ProjectStatus.Planned => "badge bg-secondary",
        ProjectStatus.InProgress => "badge bg-info text-dark",
        ProjectStatus.Completed => "badge bg-success",
        ProjectStatus.Archived => "badge bg-dark",
        _ => "badge bg-light text-dark"
    };
}
<div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="page-title">📁 @Model.Name</h2>
    <a asp-action="Index" class="btn btn-light">← Back to Projects</a>
</div>
@if (TempData["Ok"] is string ok && !string.IsNullOrWhiteSpace(ok))
{
    <div class="alert alert-success">@ok</div>
}
@if (TempData["Err"] is string err && !string.IsNullOrWhiteSpace(err))
{
    <div class="alert alert-danger">@err</div>
}

<div class="row g-4 mx-5">
    <div class="col-lg-4">

        
        <div class="card mb-4">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div><span class="@Badge(Model.Status)">@Model.Status</span></div>
                    <small class="text-muted">Created: @Model.CreatedAt.ToString("yyyy-MM-dd HH:mm")</small>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <small><strong>Start:</strong> @(Model.StartDate?.ToString("yyyy-MM-dd") ?? "-")</small>
                    </div>
                    <div class="col-md-6">
                        <small><strong>End:</strong> @(Model.EndDate?.ToString("yyyy-MM-dd") ?? "-")</small>
                    </div>
                </div>

                @if (!string.IsNullOrWhiteSpace(Model.Description))
                {
                    <hr />
                    <p class="text-muted mb-0">@Model.Description</p>
                }
            </div>
        </div>

        <!-- Members -->
        <div class="card mb-4">
            <div class="card-body">
                <h5 class="card-title">Members</h5>

                @if (Model.Members?.Any() == true)
                {
                    <ul class="list-group">
                        @foreach (var m in Model.Members)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span>
                                    <strong>@m.Username</strong>
                                    <small class="text-muted">(@m.Role)</small>
                                    @if (m.UserId == Model.OwnerUserId)
                                    {
                                        <span class="badge bg-dark ms-2">owner</span>
                                    }
                                </span>

                                @* Nút xoá *@
                                @if (isOwner && m.UserId != Model.OwnerUserId)
                                {
                                    <form asp-action="RemoveMember" asp-route-id="@Model.Id" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="memberUserId" value="@m.UserId" />
                                        <button class="btn btn-sm btn-outline-danger"
                                                onclick="return confirm('Xoá @m.Username khỏi dự án?');">
                                            Remove
                                        </button>
                                    </form>
                                }
                                else if (!isOwner && m.UserId == currentUserId)  @* member tự rời *@
                                {
                                    <form asp-action="RemoveMember" asp-route-id="@Model.Id" method="post" class="d-inline">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="memberUserId" value="@m.UserId" />
                                        <button class="btn btn-sm btn-outline-warning"
                                                onclick="return confirm('Rời khỏi dự án này?');">
                                            Leave
                                        </button>
                                    </form>
                                }
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <span class="text-muted">No members</span>
                }
            </div>
        </div>


        <!-- Thêm nhiều thành viên bằng username (CSV) -->
        @* Chỉ owner mới được thêm thành viên *@
        @if (isOwner)
        {
            <hr />
            <h6>Thêm thành viên</h6>
            <form asp-action="AddMembers" asp-route-id="@Model.Id" method="post">
                @Html.AntiForgeryToken()
                <div class="row g-2">
                    <div class="col-9 position-relative">
                        <input id="usernamesCsv" name="usernamesCsv" class="form-control" placeholder="alice, bob, charlie" autocomplete="off" />
                        <div id="user-suggest-box" class="list-group position-absolute w-75" style="z-index:1000; display:none; max-height:220px; overflow:auto;"></div>
                    </div>
                    <div class="col-3">
                        <select name="role" class="form-select">
                            <option value="member">member</option>
                            <option value="viewer">viewer</option>
                            <option value="editor">editor</option>
                        </select>
                    </div>
                </div>
                <button class="btn btn-primary mt-2" type="submit">Thêm</button>
            </form>

            <div class="mt-3 d-flex gap-2">
                <a class="btn btn-outline-primary"
                   asp-action="Edit" asp-route-id="@Model.Id">Sửa</a>

                <form asp-action="Delete" asp-route-id="@Model.Id"
                      method="post" onsubmit="return confirm('Xóa dự án này?');">
                    @Html.AntiForgeryToken()
                    <button type="submit" class="btn btn-outline-danger">Xóa</button>
                </form>
            </div>
        }
        

    </div>

    <!-- right task-->
    <div class="col-lg-8">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Thông tin các task</h5>
                <a class="btn btn-sm btn-primary"
                   asp-controller="Task" asp-action="Index" asp-route-projectId="@Model.Id">
                    Quản lí task
                </a>
            </div>
            <div class="card-body">
                @* Tùy bạn: render danh sách task hoặc placeholder *@
                <div id="tasks-panel">
                    <div class="text-muted">Chưa tải danh sách task. Nhấn “Quản lí task” để vào màn quản lí.</div>
                </div>
            </div>
        </div>
    </div>

</div>





@section Scripts {
    @if (isOwner)
    {
        <script>
            (function () {
                // gợi ý username (như bạn đã làm)
                const input = document.getElementById('usernamesCsv');
                const box = document.getElementById('user-suggest-box');
                if (!input || !box) return;
                const projectId = '@Model.Id';

                const debounce = (fn, ms) => { let t; return (...a) => { clearTimeout(t); t = setTimeout(() => fn(...a), ms); } };

                function render(list) {
                    if (!Array.isArray(list) || list.length === 0) { box.style.display = 'none'; box.innerHTML = ''; return; }
                    box.innerHTML = list.map(u => `<button type="button" class="list-group-item list-group-item-action">${u}</button>`).join('');
                    box.style.display = 'block';
                    box.querySelectorAll('button').forEach(btn => {
                        btn.addEventListener('click', () => {
                            const parts = input.value.split(',');
                            parts[parts.length - 1] = ' ' + btn.textContent;
                            input.value = parts.map(p => p.trim()).filter(Boolean).join(', ') + ', ';
                            input.focus(); box.style.display = 'none'; box.innerHTML = '';
                        });
                    });
                }

                const onInput = debounce(async () => {
                    const parts = input.value.split(',');
                    const term = (parts[parts.length - 1] || '').trim();
                    if (!term) { render([]); return; }
                    try {
                        const r = await fetch(`/api/users/suggest?q=${encodeURIComponent(term)}&projectId=${projectId}`);
                        if (r.ok) render(await r.json());
                    } catch { }
                }, 200);

                input.addEventListener('input', onInput);
                document.addEventListener('click', (e) => { if (!box.contains(e.target) && e.target !== input) box.style.display = 'none'; });
            })();
        </script>
    }
}
