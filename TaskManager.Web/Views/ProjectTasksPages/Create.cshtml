@model TaskManager.Web.Models.TaskCreateVm
@{
    ViewData["Title"] = "Thêm công việc";
    var pid = Model.ProjectId;
}

<h3 class="mb-3">Thêm công việc</h3>

<form asp-action="Create" asp-route-projectId="@pid" method="post" id="taskCreateForm">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="ProjectId" />

    <div class="mb-2">
        <label asp-for="Name" class="form-label">Tiêu đề</label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-2">
        <label asp-for="Description" class="form-label">Mô tả</label>
        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
    </div>
    <div class="col-md-4 mb-3">
        <label class="form-label">Ngày bắt đầu</label>
        <input name="StartAt" type="date" class="form-control" />
    </div>
    <div class="col-md-4 mb-3">
        <label class="form-label">Ngày kết thúc</label>
        <input name="EndAt" type="date" class="form-control" />
    </div>

    <div class="mt-3 position-relative">
        <label class="form-label">Người phụ trách (tìm theo username trong dự án)</label>
        <input id="assigneeSearch" class="form-control form-control-sm"
               placeholder="Gõ username..." autocomplete="off" />
        <div id="assigneeSuggest" class="list-group position-absolute w-100"
             style="z-index:1000; display:none; max-height:220px; overflow:auto;"></div>

        <div id="assigneesChips" class="d-flex flex-wrap gap-2 mt-2"></div>
        <div id="assigneesHidden"></div>
        <small class="text-muted d-block mt-1">Click vào gợi ý để thêm; bấm × để bỏ.</small>
    </div>


    <div class="d-flex gap-2 mt-3">
        <a class="btn btn-outline-secondary" asp-action="Index" asp-route-projectId="@pid">Quay lại</a>
        <button type="submit" class="btn btn-primary">Tạo</button>
    </div>
</form>


@section Scripts {
    <script>
        (function () {
            var pid = '@Model.ProjectId';

            var input = document.getElementById('assigneeSearch');
            var box = document.getElementById('assigneeSuggest');
            var chips = document.getElementById('assigneesChips');
            var hidden = document.getElementById('assigneesHidden');

            var selected = new Map(); // userId -> username

            function debounce(fn, ms) {
                var t; return function () { var args = arguments; clearTimeout(t); t = setTimeout(function () { fn.apply(null, args); }, ms); };
            }

            input.addEventListener('input', debounce(onType, 150));
            input.addEventListener('keydown', function (e) { if (e.key === 'Enter') { e.preventDefault(); } });
            document.addEventListener('click', function (e) {
                if (!box.contains(e.target) && e.target !== input) hideSuggest();
            });

            async function onType() {
                var q = (input.value || '').trim();
                if (!q) { hideSuggest(); return; }

                try {
                    var url = '/api/projects/' + pid + '/members/suggest?q=' + encodeURIComponent(q) + '&take=8';
                    var res = await fetch(url);
                    if (!res.ok) { hideSuggest(); return; }
                    var items = await res.json();                 // [{userId, username}]
                    items = items.filter(function (x) { return !selected.has(x.userId); });

                    renderSuggest(items);
                } catch (err) {
                    hideSuggest();
                }
            }

            function renderSuggest(items) {
                box.style.display = 'none';
                box.innerHTML = ''; // clear

                if (!items || items.length === 0) return;

                items.forEach(function (x) {
                    var btn = document.createElement('button');
                    btn.type = 'button';
                    btn.className = 'list-group-item list-group-item-action';
                    btn.dataset.id = x.userId;
                    btn.dataset.name = x.username;
                    btn.textContent = (x.username || x.userId);
                    btn.addEventListener('click', function () {
                        addAssignee(x.userId, x.username);
                        input.value = '';
                        hideSuggest();
                        input.focus();
                    });
                    box.appendChild(btn);
                });

                box.style.display = 'block';
            }

            function addAssignee(userId, username) {
                if (selected.has(userId)) return;
                selected.set(userId, username);

                // chip
                var chip = document.createElement('span');
                chip.className = 'badge rounded-pill text-bg-secondary text-black';
                chip.style.userSelect = 'none';

                var chipText = document.createElement('span');
                chipText.textContent = (username || userId);
                chip.appendChild(chipText);

                var x = document.createElement('button');
                x.type = 'button';
                x.className = 'btn-close btn-sm ms-1 custom-close';
                x.setAttribute('aria-label', 'Xóa');
                x.addEventListener('click', function () {
                    selected.delete(userId);
                    chip.remove();
                    var hid = hidden.querySelector('input[data-user-id="' + cssEscape(userId) + '"]');
                    if (hid) hid.remove();
                });
                chip.appendChild(x);

                chips.appendChild(chip);

                // hidden input để POST AssigneeUserIds
                var hid = document.createElement('input');
                hid.type = 'hidden';
                hid.name = 'AssigneeUserIds';
                hid.value = userId;
                hid.setAttribute('data-user-id', userId);
                hidden.appendChild(hid);
            }

            function hideSuggest() { box.style.display = 'none'; box.innerHTML = ''; }

            function cssEscape(s) {
                // fallback nhỏ nếu trình duyệt không có CSS.escape
                try { return CSS.escape(s); } catch { return String(s).replace(/["'\\]/g, '\\$&'); }
            }
        })();
    </script>

    <style>
        /* Nút × rõ hơn trong chip */
        #assigneesChips .custom-close {
            filter: invert(0%) sepia(0%) saturate(0%) hue-rotate(0deg) brightness(0%) contrast(100%);
            opacity: 0.7;
        }

            #assigneesChips .custom-close:hover {
                opacity: 1;
                filter: invert(20%) sepia(80%) saturate(3000%) hue-rotate(330deg) brightness(95%) contrast(100%);
            }
    </style>
}
